when you create a new repositary in local computer.

1. create a folder for your repositary and name it as the repositary name
2. go to github.com and create a new repositary and copy the url of the repositary
3. then open terminal inside the local repo folder. 
    a) command - git init
    b) command - git remote add origin <URL>
    c) command - git pull origin <branch name> // most of the times the branch name is main.
4. Now you can start working on the local repositary
5. when you do a significant change and needs to push to the remote then use the following commands.
    a) command - git status // looking at the current status of the local repositary
    b) command - git add . // adding all the files to the staging area
    c) command - git commit -m "<message describing the commit>"
    d) command - git push -u origin <branch name> // most of the times the branch name is main
6. Heres how you can work on local repositary updating the remote origin. 


Here are some another important information on git

Learn more about main and master on github and how to work with local repo using this stackoverflow thread
https://stackoverflow.com/questions/64249491/difference-between-main-branch-and-master-branch-in-github

when you start working on local repo for first time you will start with master branch where you have to merge the pull requests from github.com when you push commits from local repo as master.
So you can change the branch to main using the following command
    command - git branch -m master main // this command does something similar to renaming the master to main
after executing the above command we can use the following command for push to the remote origin
    command - git push -u origin main


I got this following error 
"""
 ! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'https://github.com/Divisekara/tic-tac-toe-java.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
PS C:\Users\Asitha\Desktop\JAVA\tic-tac-toe-java> git push -f origin FixForBug
error: src refspec FixForBug does not match any
"""

this problem can be solved by forced pushing where the command is 
    command - git push -f origin main // f - flag stands for forced.

then we can keep pushing using the following code
    command - git push -u origin main



As I learned even we can see only main branch in github.com we are on the branch named master which is similar to main. so need to checkout to main branch in our local 
repo in order to start pushing.
    commmand - git checkout main // you can switch the branch from any to main

Then only you can start working in main branch

In order to see the current branch and other branches on our local and remote repo 
    command - git branch -a


I accidentally fucked up  something using the following mistaken command 
    command - git add /
    dont use it unless you want to get fucked too.

In order to go to previous commits you can use following command
    command - git log // see the commit history
    command - git checkout -f <id of the commit you want to revert> // reverting the whole folder into specified commit

Now what happened is I reverted a commit and I am on no branch and show
"Head detached from <reverted commit id>"

So you cant push your work to main or any other branches. follow the below steps to successfully push works into the desired branch again.

step one. 
commit the work under detached from head
    command - git add .
    command - git commit -m "sample detaching"

step two 
create a new branch with the commit done using the detached work.
    command - git branch <branch name> <commit id of the detached work> // you can now start a new branch with the done work

step three
push the work and new branch to the github.com. make sure you are in the newly created branch using commands
    command - git checkout <new branch name> // making sure you are in the new branch
    command - git add .
    command - git commit -m "new branch" 
    command - git push -u origin <new branch name> // if not working use forced push by -f flag instead of -u flag
now you are in the new branch

step Four 
you can merge the new branch to the main branch now.
    command - git checkout main // first you have to move to the desired branch to merge. for this occasion I want to merge to the main branch
    command - git merge <new branch name> // now you have merged the detached work




